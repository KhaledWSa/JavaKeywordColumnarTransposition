/**
 *
 * This is the decoder frame that holds the text boxes,
 * which accpets a keyword and an encoded message 
 *then decode the encoded message using the decode button.
 *
 *@aothor Mohannad A. Alnahhas,Mohammed A. Alsaggaf, Khaled W. Saqi
 *@version 1.0 
 */
 
package discreteproject;

import java.util.ArrayList;
import java.util.Collections;

public class DecodeFrame extends javax.swing.JFrame {
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DecodeButtom;
    private javax.swing.JLabel SentenceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keywordField;
    private javax.swing.JLabel keywordLabel;
    private javax.swing.JTextField sentenceField;
    private javax.swing.JTextArea solutionBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form DecodeFrame
     */
    public DecodeFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
	
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

		//Components Creation
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        solutionBox = new javax.swing.JTextArea(); //Result text area
        DecodeButtom = new javax.swing.JButton();
        sentenceField = new javax.swing.JTextField();
        keywordField = new javax.swing.JTextField();
        keywordLabel = new javax.swing.JLabel();
        SentenceLabel = new javax.swing.JLabel();

		
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);  //Windows Close Button

		//Frame Preferences
        jPanel1.setBackground(new java.awt.Color(230, 230, 234));
        jLabel1.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(33, 144, 159));
        jLabel1.setText("Decoded Message");
        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(33, 144, 159));
		
        jLabel2.setText("Back To Menu"); //Back To Menu Label, This label will have the ability to be pressed.
		
		//Adding action handler to the jLabel2 which allow it to be pressed.
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

		//Result text area preferences
        solutionBox.setColumns(20);
        solutionBox.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
        solutionBox.setLineWrap(true);
        solutionBox.setRows(1);
        solutionBox.setWrapStyleWord(true);
        jScrollPane1.setViewportView(solutionBox);

		//Decode Button preferences
        DecodeButtom.setBackground(new java.awt.Color(244, 244, 248));
        DecodeButtom.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        DecodeButtom.setForeground(new java.awt.Color(254, 74, 73));
        DecodeButtom.setText("Decode");
		
		////Decode Button action handler
        DecodeButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeButtomActionPerformed(evt);
            }
        });

		//Labels preferences
        keywordLabel.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        keywordLabel.setForeground(new java.awt.Color(33, 144, 159));
        keywordLabel.setText("Keyword");
		
        SentenceLabel.setFont(new java.awt.Font("Leelawadee UI", 1, 18)); // NOI18N
        SentenceLabel.setForeground(new java.awt.Color(33, 144, 159));
        SentenceLabel.setText("Encoded Message");

		//Layout preferences
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(keywordLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(keywordField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(SentenceLabel)
                                .addGap(18, 18, 18)
                                .addComponent(sentenceField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(DecodeButtom, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
		
		//Layout preferences
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(DecodeButtom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keywordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keywordLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sentenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SentenceLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(23, Short.MAX_VALUE))
        );

		//Layout preferences
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
		
		//Layout preferences
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
		
    }// </editor-fold>//GEN-END:initComponents

	/**
	 *This function recives decode button event and handle it.
	 *The function will take the keyword from the keywordField and the messgae from sentenceField,
	 *then perform the decryption algorithm.
	 *
	 *@aothor Mohannad A. Alnahhas,Mohammed A. Alsaggaf, Khaled W. Saqi
	 *@version 1.0
	 *
	 */
    private void DecodeButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeButtomActionPerformed
	
		//Getting keyword from the keywordField
		String Word = keywordField.getText();
		Word = Word.toUpperCase();
		
		ArrayList<Character> keyword = new ArrayList<Character>();//Character keyword ArrayList

		//Insert all the Word characters into the keyword ArrayList
		for (int i=0; i<(Word.length());i++) {
				keyword.add(Word.charAt(i));
			}
		
		//Getting message from the sentenceField
		String Sentence2 = sentenceField.getText();
		Sentence2 = Sentence2.toUpperCase();
		
		char[][] decodeM= decoderArray( Sentence2, Word); //Perform the first decryption stage
		char[][] decodeSorted = decodeSort(decodeM,keyword); //Perform the second decryption stage
		
		String DecodeMesagge="";
		
		//insert the decoded messgae row by row
		for(int R=0;R<decodeSorted.length;R++) {
			for(int C=0;C<decodeSorted[0].length;C++) {
						
				//System.out.print(decodeSorted[R][C]+"  ");
				DecodeMesagge=DecodeMesagge+decodeSorted[R][C];
			}
			
		}
		
		solutionBox.setText(DecodeMesagge); //Print the result on the Result text area.

    }//GEN-LAST:event_DecodeButtomActionPerformed

	/**
	 *Back To Menu Event Handler.
	 * 
	 *@aothor Mohannad A. Alnahhas
	 *
	 */
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
	
		this.setVisible(false); 
		new NewJFrame().setVisible(true);// TODO add your handling code here:
		
    }//GEN-LAST:event_jLabel2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecodeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecodeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecodeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecodeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecodeFrame().setVisible(true);
            }
        });
    }

	/**
	 *First Stage of the decryption 
	 *by putting the kyeword and message in array of size message.length/keyword.length*keyword.length.
	 *
	 *@aothor Mohannad A. Alnahhas,Mohammed A. Alsaggaf, Khaled W. Saqi
	 *@return char[][] , DecodeM
	 */
	public static char[][] decoderArray(String SentenceD,String Word){

		char[][] DecodeM = new char[SentenceD.length()/Word.length()][Word.length()];
		
		
		int indicator=0;
		int permission=0;
		//System.out.println(keyword);
		
		for(int C=0;C<Word.length();C++) {
			for(int R=0; R<SentenceD.length()/Word.length();R++) {
				DecodeM[R][C]= SentenceD.charAt(indicator);
				if (indicator<SentenceD.length()-1) {
					indicator++;
			
					}
				else { permission++; break;}
			}
			if (permission==1) {break;}
		}
	
		for (int R=0; R<SentenceD.length()/Word.length();R++) {
			for(int C=0; C<Word.length();C++) {
				System.out.print(DecodeM[R][C]+"  ");
			}
			System.out.println();
		}//printing
		
		return DecodeM;
	}
	
	/**
	 *Second Stage of the decryption, 
	 *by sorting the message  according to the keyword's alphabetical order.
	 *
	 *@aothor Mohannad A. Alnahhas,Mohammed A. Alsaggaf, Khaled W. Saqi
	 *@return char[][] , decodeSorted
	 */
	public static char[][] decodeSort(char[][] decodeM,ArrayList<Character> keyword){
		
		char[][] decodeSorted = new char[decodeM.length][decodeM[0].length];
		ArrayList<Character> keywordSorted = new ArrayList<Character>();
		
		keywordSorted.addAll(keyword);//add keyword on the keywordSorted
		
		Collections.sort(keywordSorted);//Sort the KeywordSorted
		
		for (int i=0; i<keyword.size();i++) {
			for(int j=0;j<keywordSorted.size();j++) {
				
				if(keywordSorted.get(i).equals(keyword.get(j))) {//Specify The indexes
					for(int R=0;R<decodeM.length;R++) {
						
						decodeSorted[R][j]=decodeM[R][i]; /* Insert values on the Encoded Matrix ,  R:Rows ,  
							i: shows which index to insert on , j:shows which index to take values from */
					}
				}
			}

		}
		
		return decodeSorted;
	}
}
